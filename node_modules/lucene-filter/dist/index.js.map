{
  "version": 3,
  "sources": ["../src/implicit.js", "../src/field.js", "../src/filters/regexp.js", "../src/filters/number/range.js", "../src/filters/number/exact.js", "../src/filters/number/comparison.js", "../src/filters/string/starts-with.js", "../src/filters/string/ends-with.js", "../src/filters/string/contains.js", "../src/filters/index.js", "../src/operators/or.js", "../src/operators/and.js", "../src/operators/or-not.js", "../src/operators/and-not.js", "../src/operators/index.js", "../src/index.js"],
  "sourcesContent": ["const implicit = module.exports = function(data,test) {\n  return Object.keys(data).reduce((r,key) => {\n    return r || require('./field')(key,data,test);\n  }, false);\n};\n", "const field = module.exports = function (field, data, test) {\n  if ('<implicit>' === field) return require('./implicit')(data, test);\n  return test(data[field]);\n};\n", "const field = require('../field');\n\nmodule.exports = {\n  detect : function (query) {\n    if (!query) return false;\n    if ('object' !== typeof query) return false;\n    return !!query.regexpr || !!query.regex;\n  },\n  compile: function (query) {\n    const regex = new RegExp(query.term);\n    return function (data) {\n      return field(query.field, data, function (value) {\n        return regex.test(value);\n      }) ? query.boost : 0;\n    };\n  },\n};\n", "const field = require('../../field');\n\nmodule.exports = {\n  detect : function (query) {\n    if (!query) return false;\n    if ('object' !== typeof query) return false;\n    if (!('inclusive' in query)) return false;\n    if (isNaN(query.term_min)) return false;\n    return !isNaN(query.term_max);\n  },\n  compile: function (query) {\n    return function (data) {\n      return field(query.field, data, function (value) {\n        // console.log('range value', query, value);\n        let min = parseFloat(query.term_min);\n        let max = parseFloat(query.term_max);\n        let inclusive = query.inclusive;\n        if (inclusive === 'both') {\n          return (value >= min) && (value <= max);\n        }\n        if (inclusive === 'left') {\n          return (value >= min) && (value < max);\n        }\n        if (inclusive === 'right') {\n          return (value > min) && (value <= max);\n        }\n        return false;\n      });\n    };\n  },\n};\n", "const field = require('../../field');\n\nmodule.exports = {\n  detect : function (query) {\n    if (!query) return false;\n    if ('object' !== typeof query) return false;\n    if (!query.term) return false;\n    return !isNaN(query.term);\n  },\n  compile: function (query) {\n    query.similarity = query.similarity || 0;\n    return function (data) {\n      return field(query.field, data, function (value) {\n        value   = parseFloat(value);\n        let min = parseFloat(query.term) - query.similarity;\n        let max = parseFloat(query.term) + query.similarity;\n        return (min <= value) && (value <= max);\n      }) ? query.boost : 0;\n    };\n  },\n};\n", "const field = require('../../field');\n\nmodule.exports = {\n  detect : function (query) {\n    if (!query) {\n      return false;\n    }\n    if ('object' !== typeof query) {\n      return false;\n    }\n    if (!query.term) {\n      return false;\n    }\n    return Array.isArray(query.term.match(/^[<=>]+/));\n  },\n  compile: function (query) {\n    query.similarity = query.similarity || 0;\n    return function (data) {\n      return field(query.field, data, function (value) {\n        let sign, num;\n        value = parseFloat(value);\n        if (sign = query.term.match(/^[<=>]+/)) {\n          [sign] = sign;\n        }\n        num = query.term.match(/[0-9.]+/);\n        if (!num) {\n          return false;\n        }\n        num = Number(num[0]);\n        if (sign) {\n          if (sign === '>') {\n            return value > num;\n          } else if (sign === '>=') {\n            return value >= num;\n          } else if (sign === '<') {\n            return value < num;\n          } else if (sign === '<=') {\n            return value <= num;\n          } else {\n            throw new Error(`Invalid sign: ${sign}`);\n          }\n        } else {\n          return value === num;\n        }\n      });\n    };\n  },\n};\n", "const field = require('../../field');\n\nmodule.exports = {\n  detect : function (query) {\n    if (!query) return false;\n    if ('object' !== typeof query) return false;\n    if ('string' !== typeof query.field) return false;\n    return ('*' === query.field.substr(-1));\n  },\n  compile: function (query) {\n    query.field = query.field.substr(0, query.field.length - 1);\n    return function (data) {\n      return field(query.field, data, function (value) {\n        if ('string' !== typeof value) return false;\n        return value.toLowerCase().substr(0, query.term.length) === query.term.toLowerCase();\n      }) ? query.boost : 0;\n    };\n  },\n};\n", "const field = require('../../field');\n\nmodule.exports = {\n  detect : function (query) {\n    if (!query) return false;\n    if ('object' !== typeof query) return false;\n    if ('string' !== typeof query.field) return false;\n    return ('*' === query.field.substr(0, 1));\n  },\n  compile: function (query) {\n    query.field = query.field.substr(1);\n    return function (data) {\n      return field(query.field, data, function (value) {\n        if ('string' !== typeof value) return false;\n        return value.toLowerCase().substr(-query.term.length) === query.term.toLowerCase();\n      }) ? query.boost : 0;\n    };\n  },\n};\n", "const field = require('../../field');\n\nmodule.exports = {\n  detect : function (query) {\n    if (!query) return false;\n    if ('object' !== typeof query) return false;\n    if ('string' !== typeof query.field) return false;\n    return 'string' === typeof query.term;\n  },\n  compile: function (query) {\n    return function (data) {\n      return field(query.field, data, function check (value) {\n        if ('string' === typeof value) {\n          return ~value.toLowerCase().indexOf(query.term.toLowerCase());\n        } else if (Array.isArray(value)) {\n          for(const v of value)\n            if (check(v)) return true;\n          return false;\n        } else {\n          return false;\n        }\n      }) ? query.boost : 0;\n    };\n  },\n};\n", "const filters = module.exports = [];\nfilters.push(require('./regexp'));\nfilters.push(require('./number/range'));\nfilters.push(require('./number/exact'));\nfilters.push(require('./number/comparison'));\nfilters.push(require('./string/starts-with'));\nfilters.push(require('./string/ends-with'));\nfilters.push(require('./string/contains'));\n", "module.exports = (l, r) => (data) => {\n  let\n    rl  = l(data) || 0,\n    rr  = r(data) || 0,\n    rla = Math.abs(rl),\n    rra = Math.abs(rr);\n  if (rla > rra) return rl;\n  if (rla < rra) return rr;\n  return Math.max(rl, rr);\n};\n", "module.exports = (l, r) => (data) => {\n  let\n    rl  = l(data) || 0,\n    rr  = r(data) || 0,\n    rla = Math.abs(rl),\n    rra = Math.abs(rr);\n  if (rla > rra) return rr;\n  if (rla < rra) return rl;\n  return Math.min(rl, rr);\n};\n", "module.exports = function (operators) {\n  return (l, r) => (data) => {\n    return operators['OR'](l, function (...args) {\n      return -r(...args);\n    })(data);\n  };\n};\n", "module.exports = function (operators) {\n  return (l, r) => (data) => {\n    return operators['AND'](l, function (...args) {\n      return -r(...args);\n    })(data);\n  };\n};\n\n", "const operators      = module.exports = {};\noperators['OR']      = require('./or');\noperators['AND']     = require('./and');\noperators['OR NOT']  = require('./or-not')(operators);\noperators['AND NOT'] = require('./and-not')(operators);\n", "// Factory\nconst lucene = module.exports = function factory( parser ) {\n\n  // Parser must be given\n  if (!parser) {\n    throw new Error('No parser given. Must be one of \\'lucene\\',\\'lucene-queryparser\\',\\'lucene-query-parser\\'');\n  }\n\n  // The given parser must be compatible\n  if (('object' !== typeof parser) || ('function' !== typeof parser.parse)) {\n    throw new Error('Incompatible parser given. Must be one of \\'lucene\\',\\'lucene-queryparser\\',\\'lucene-query-parser\\'');\n  }\n\n  // Returns Function(Object):Number\n  function compile(query) {\n    if (!query) return ()=>0;\n\n    if ('string' === typeof query) {\n      try {\n        query = parser.parse(query);\n      } catch(e) {\n        return ()=>0;\n      }\n    }\n\n    // Compile multi-query\n    if (query.operator) {\n      return lucene.operators[query.operator](\n        compile(query.left),\n        compile(query.right),\n      );\n    }\n\n    // Wrapped\n    if (query.left) {\n      return compile(query.left);\n    }\n\n\n    // Ensure default boost\n    query.boost = query.boost || 1;\n\n    // Return the first detected filter\n    for (const filter of lucene.filters) {\n      if (filter.detect(query)) {\n        return filter.compile(query);\n      }\n    }\n\n    // Return no match\n    return ()=>0;\n  }\n\n  // Return the data when matching\n  compile.passthrough = function(parser, query) {\n    let match = compile(query);\n    return function(data) {\n      if(match(data)) return data;\n      return undefined;\n    };\n  };\n\n  return compile;\n};\n\n// Add filters & operators\nlucene.filters   = require('./filters');\nlucene.operators = require('./operators');\n\n// Browser exports\nif (('function' === typeof define) && define.amd) {\n  define(() => lucene);\n} else if ('object' === typeof window) {\n  window.lucene = lucene;\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA,UAAM,WAAW,OAAO,UAAU,SAAS,MAAK,MAAM;AACpD,eAAO,OAAO,KAAK,IAAI,EAAE,OAAO,CAAC,GAAE,QAAQ;AACzC,iBAAO,KAAK,gBAAmB,KAAI,MAAK,IAAI;AAAA,QAC9C,GAAG,KAAK;AAAA,MACV;AAAA;AAAA;;;ACJA;AAAA;AAAA,UAAM,QAAQ,OAAO,UAAU,SAAU,QAAO,MAAM,MAAM;AAC1D,YAAI,AAAiB,WAAjB;AAAwB,iBAAO,mBAAsB,MAAM,IAAI;AACnE,eAAO,KAAK,KAAK,OAAM;AAAA,MACzB;AAAA;AAAA;;;ACHA;AAAA;AAAA,UAAM,QAAQ;AAEd,aAAO,UAAU;AAAA,QACf,QAAS,SAAU,OAAO;AACxB,cAAI,CAAC;AAAO,mBAAO;AACnB,cAAI,AAAa,OAAO,UAApB;AAA2B,mBAAO;AACtC,iBAAO,CAAC,CAAC,MAAM,WAAW,CAAC,CAAC,MAAM;AAAA,QACpC;AAAA,QACA,SAAS,SAAU,OAAO;AACxB,gBAAM,QAAQ,IAAI,OAAO,MAAM,IAAI;AACnC,iBAAO,SAAU,MAAM;AACrB,mBAAO,MAAM,MAAM,OAAO,MAAM,SAAU,OAAO;AAC/C,qBAAO,MAAM,KAAK,KAAK;AAAA,YACzB,CAAC,IAAI,MAAM,QAAQ;AAAA,UACrB;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;AChBA;AAAA;AAAA,UAAM,QAAQ;AAEd,aAAO,UAAU;AAAA,QACf,QAAS,SAAU,OAAO;AACxB,cAAI,CAAC;AAAO,mBAAO;AACnB,cAAI,AAAa,OAAO,UAApB;AAA2B,mBAAO;AACtC,cAAI,CAAE,gBAAe;AAAQ,mBAAO;AACpC,cAAI,MAAM,MAAM,QAAQ;AAAG,mBAAO;AAClC,iBAAO,CAAC,MAAM,MAAM,QAAQ;AAAA,QAC9B;AAAA,QACA,SAAS,SAAU,OAAO;AACxB,iBAAO,SAAU,MAAM;AACrB,mBAAO,MAAM,MAAM,OAAO,MAAM,SAAU,OAAO;AAE/C,kBAAI,MAAM,WAAW,MAAM,QAAQ;AACnC,kBAAI,MAAM,WAAW,MAAM,QAAQ;AACnC,kBAAI,YAAY,MAAM;AACtB,kBAAI,cAAc,QAAQ;AACxB,uBAAQ,SAAS,OAAS,SAAS;AAAA,cACrC;AACA,kBAAI,cAAc,QAAQ;AACxB,uBAAQ,SAAS,OAAS,QAAQ;AAAA,cACpC;AACA,kBAAI,cAAc,SAAS;AACzB,uBAAQ,QAAQ,OAAS,SAAS;AAAA,cACpC;AACA,qBAAO;AAAA,YACT,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;AC9BA;AAAA;AAAA,UAAM,QAAQ;AAEd,aAAO,UAAU;AAAA,QACf,QAAS,SAAU,OAAO;AACxB,cAAI,CAAC;AAAO,mBAAO;AACnB,cAAI,AAAa,OAAO,UAApB;AAA2B,mBAAO;AACtC,cAAI,CAAC,MAAM;AAAM,mBAAO;AACxB,iBAAO,CAAC,MAAM,MAAM,IAAI;AAAA,QAC1B;AAAA,QACA,SAAS,SAAU,OAAO;AACxB,gBAAM,aAAa,MAAM,cAAc;AACvC,iBAAO,SAAU,MAAM;AACrB,mBAAO,MAAM,MAAM,OAAO,MAAM,SAAU,OAAO;AAC/C,sBAAU,WAAW,KAAK;AAC1B,kBAAI,MAAM,WAAW,MAAM,IAAI,IAAI,MAAM;AACzC,kBAAI,MAAM,WAAW,MAAM,IAAI,IAAI,MAAM;AACzC,qBAAQ,OAAO,SAAW,SAAS;AAAA,YACrC,CAAC,IAAI,MAAM,QAAQ;AAAA,UACrB;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;ACpBA;AAAA;AAAA,UAAM,QAAQ;AAEd,aAAO,UAAU;AAAA,QACf,QAAS,SAAU,OAAO;AACxB,cAAI,CAAC,OAAO;AACV,mBAAO;AAAA,UACT;AACA,cAAI,AAAa,OAAO,UAApB,UAA2B;AAC7B,mBAAO;AAAA,UACT;AACA,cAAI,CAAC,MAAM,MAAM;AACf,mBAAO;AAAA,UACT;AACA,iBAAO,MAAM,QAAQ,MAAM,KAAK,MAAM,SAAS,CAAC;AAAA,QAClD;AAAA,QACA,SAAS,SAAU,OAAO;AACxB,gBAAM,aAAa,MAAM,cAAc;AACvC,iBAAO,SAAU,MAAM;AACrB,mBAAO,MAAM,MAAM,OAAO,MAAM,SAAU,OAAO;AAC/C,kBAAI,MAAM;AACV,sBAAQ,WAAW,KAAK;AACxB,kBAAI,OAAO,MAAM,KAAK,MAAM,SAAS,GAAG;AACtC,iBAAC,IAAI,IAAI;AAAA,cACX;AACA,oBAAM,MAAM,KAAK,MAAM,SAAS;AAChC,kBAAI,CAAC,KAAK;AACR,uBAAO;AAAA,cACT;AACA,oBAAM,OAAO,IAAI,EAAE;AACnB,kBAAI,MAAM;AACR,oBAAI,SAAS,KAAK;AAChB,yBAAO,QAAQ;AAAA,gBACjB,WAAW,SAAS,MAAM;AACxB,yBAAO,SAAS;AAAA,gBAClB,WAAW,SAAS,KAAK;AACvB,yBAAO,QAAQ;AAAA,gBACjB,WAAW,SAAS,MAAM;AACxB,yBAAO,SAAS;AAAA,gBAClB,OAAO;AACL,wBAAM,IAAI,MAAM,iBAAiB,MAAM;AAAA,gBACzC;AAAA,cACF,OAAO;AACL,uBAAO,UAAU;AAAA,cACnB;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;AC/CA;AAAA;AAAA,UAAM,QAAQ;AAEd,aAAO,UAAU;AAAA,QACf,QAAS,SAAU,OAAO;AACxB,cAAI,CAAC;AAAO,mBAAO;AACnB,cAAI,AAAa,OAAO,UAApB;AAA2B,mBAAO;AACtC,cAAI,AAAa,OAAO,MAAM,UAA1B;AAAiC,mBAAO;AAC5C,iBAAQ,AAAQ,MAAM,MAAM,OAAO,EAAE,MAA7B;AAAA,QACV;AAAA,QACA,SAAS,SAAU,OAAO;AACxB,gBAAM,QAAQ,MAAM,MAAM,OAAO,GAAG,MAAM,MAAM,SAAS,CAAC;AAC1D,iBAAO,SAAU,MAAM;AACrB,mBAAO,MAAM,MAAM,OAAO,MAAM,SAAU,OAAO;AAC/C,kBAAI,AAAa,OAAO,UAApB;AAA2B,uBAAO;AACtC,qBAAO,MAAM,YAAY,EAAE,OAAO,GAAG,MAAM,KAAK,MAAM,MAAM,MAAM,KAAK,YAAY;AAAA,YACrF,CAAC,IAAI,MAAM,QAAQ;AAAA,UACrB;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;AClBA;AAAA;AAAA,UAAM,QAAQ;AAEd,aAAO,UAAU;AAAA,QACf,QAAS,SAAU,OAAO;AACxB,cAAI,CAAC;AAAO,mBAAO;AACnB,cAAI,AAAa,OAAO,UAApB;AAA2B,mBAAO;AACtC,cAAI,AAAa,OAAO,MAAM,UAA1B;AAAiC,mBAAO;AAC5C,iBAAQ,AAAQ,MAAM,MAAM,OAAO,GAAG,CAAC,MAA/B;AAAA,QACV;AAAA,QACA,SAAS,SAAU,OAAO;AACxB,gBAAM,QAAQ,MAAM,MAAM,OAAO,CAAC;AAClC,iBAAO,SAAU,MAAM;AACrB,mBAAO,MAAM,MAAM,OAAO,MAAM,SAAU,OAAO;AAC/C,kBAAI,AAAa,OAAO,UAApB;AAA2B,uBAAO;AACtC,qBAAO,MAAM,YAAY,EAAE,OAAO,CAAC,MAAM,KAAK,MAAM,MAAM,MAAM,KAAK,YAAY;AAAA,YACnF,CAAC,IAAI,MAAM,QAAQ;AAAA,UACrB;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;AClBA;AAAA;AAAA,UAAM,QAAQ;AAEd,aAAO,UAAU;AAAA,QACf,QAAS,SAAU,OAAO;AACxB,cAAI,CAAC;AAAO,mBAAO;AACnB,cAAI,AAAa,OAAO,UAApB;AAA2B,mBAAO;AACtC,cAAI,AAAa,OAAO,MAAM,UAA1B;AAAiC,mBAAO;AAC5C,iBAAO,AAAa,OAAO,MAAM,SAA1B;AAAA,QACT;AAAA,QACA,SAAS,SAAU,OAAO;AACxB,iBAAO,SAAU,MAAM;AACrB,mBAAO,MAAM,MAAM,OAAO,MAAM,eAAgB,OAAO;AACrD,kBAAI,AAAa,OAAO,UAApB,UAA2B;AAC7B,uBAAO,CAAC,MAAM,YAAY,EAAE,QAAQ,MAAM,KAAK,YAAY,CAAC;AAAA,cAC9D,WAAW,MAAM,QAAQ,KAAK,GAAG;AAC/B,2BAAU,KAAK;AACb,sBAAI,MAAM,CAAC;AAAG,2BAAO;AACvB,uBAAO;AAAA,cACT,OAAO;AACL,uBAAO;AAAA,cACT;AAAA,YACF,CAAC,IAAI,MAAM,QAAQ;AAAA,UACrB;AAAA,QACF;AAAA,MACF;AAAA;AAAA;;;ACxBA;AAAA;AAAA,UAAM,UAAU,OAAO,UAAU,CAAC;AAClC,cAAQ,KAAK,gBAAmB;AAChC,cAAQ,KAAK,eAAyB;AACtC,cAAQ,KAAK,eAAyB;AACtC,cAAQ,KAAK,oBAA8B;AAC3C,cAAQ,KAAK,qBAA+B;AAC5C,cAAQ,KAAK,mBAA6B;AAC1C,cAAQ,KAAK,kBAA4B;AAAA;AAAA;;;ACPzC;AAAA;AAAA,aAAO,UAAU,CAAC,GAAG,MAAM,CAAC,SAAS;AACnC,YACE,KAAM,EAAE,IAAI,KAAK,GACjB,KAAM,EAAE,IAAI,KAAK,GACjB,MAAM,KAAK,IAAI,EAAE,GACjB,MAAM,KAAK,IAAI,EAAE;AACnB,YAAI,MAAM;AAAK,iBAAO;AACtB,YAAI,MAAM;AAAK,iBAAO;AACtB,eAAO,KAAK,IAAI,IAAI,EAAE;AAAA,MACxB;AAAA;AAAA;;;ACTA;AAAA;AAAA,aAAO,UAAU,CAAC,GAAG,MAAM,CAAC,SAAS;AACnC,YACE,KAAM,EAAE,IAAI,KAAK,GACjB,KAAM,EAAE,IAAI,KAAK,GACjB,MAAM,KAAK,IAAI,EAAE,GACjB,MAAM,KAAK,IAAI,EAAE;AACnB,YAAI,MAAM;AAAK,iBAAO;AACtB,YAAI,MAAM;AAAK,iBAAO;AACtB,eAAO,KAAK,IAAI,IAAI,EAAE;AAAA,MACxB;AAAA;AAAA;;;ACTA;AAAA;AAAA,aAAO,UAAU,SAAU,WAAW;AACpC,eAAO,CAAC,GAAG,MAAM,CAAC,SAAS;AACzB,iBAAO,UAAU,MAAM,GAAG,YAAa,MAAM;AAC3C,mBAAO,CAAC,EAAE,GAAG,IAAI;AAAA,UACnB,CAAC,EAAE,IAAI;AAAA,QACT;AAAA,MACF;AAAA;AAAA;;;ACNA;AAAA;AAAA,aAAO,UAAU,SAAU,WAAW;AACpC,eAAO,CAAC,GAAG,MAAM,CAAC,SAAS;AACzB,iBAAO,UAAU,OAAO,GAAG,YAAa,MAAM;AAC5C,mBAAO,CAAC,EAAE,GAAG,IAAI;AAAA,UACnB,CAAC,EAAE,IAAI;AAAA,QACT;AAAA,MACF;AAAA;AAAA;;;ACNA;AAAA;AAAA,UAAM,YAAiB,OAAO,UAAU,CAAC;AACzC,gBAAU,QAAa;AACvB,gBAAU,SAAa;AACvB,gBAAU,YAAa,iBAAoB,SAAS;AACpD,gBAAU,aAAa,kBAAqB,SAAS;AAAA;AAAA;;;ACJrD;AAAA;AACA,UAAM,SAAS,OAAO,UAAU,iBAAkB,QAAS;AAGzD,YAAI,CAAC,QAAQ;AACX,gBAAM,IAAI,MAAM,qFAA2F;AAAA,QAC7G;AAGA,YAAK,AAAa,OAAO,WAApB,YAAgC,AAAe,OAAO,OAAO,UAA7B,YAAqC;AACxE,gBAAM,IAAI,MAAM,+FAAqG;AAAA,QACvH;AAGA,yBAAiB,OAAO;AACtB,cAAI,CAAC;AAAO,mBAAO,MAAI;AAEvB,cAAI,AAAa,OAAO,UAApB,UAA2B;AAC7B,gBAAI;AACF,sBAAQ,OAAO,MAAM,KAAK;AAAA,YAC5B,SAAQ,GAAN;AACA,qBAAO,MAAI;AAAA,YACb;AAAA,UACF;AAGA,cAAI,MAAM,UAAU;AAClB,mBAAO,OAAO,UAAU,MAAM,UAC5B,QAAQ,MAAM,IAAI,GAClB,QAAQ,MAAM,KAAK,CACrB;AAAA,UACF;AAGA,cAAI,MAAM,MAAM;AACd,mBAAO,QAAQ,MAAM,IAAI;AAAA,UAC3B;AAIA,gBAAM,QAAQ,MAAM,SAAS;AAG7B,qBAAW,UAAU,OAAO,SAAS;AACnC,gBAAI,OAAO,OAAO,KAAK,GAAG;AACxB,qBAAO,OAAO,QAAQ,KAAK;AAAA,YAC7B;AAAA,UACF;AAGA,iBAAO,MAAI;AAAA,QACb;AAGA,gBAAQ,cAAc,SAAS,SAAQ,OAAO;AAC5C,cAAI,QAAQ,QAAQ,KAAK;AACzB,iBAAO,SAAS,MAAM;AACpB,gBAAG,MAAM,IAAI;AAAG,qBAAO;AACvB,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAGA,aAAO,UAAY;AACnB,aAAO,YAAY;AAGnB,UAAK,AAAe,OAAO,WAAtB,cAAiC,OAAO,KAAK;AAChD,eAAO,MAAM,MAAM;AAAA,MACrB,WAAW,AAAa,OAAO,WAApB,UAA4B;AACrC,eAAO,SAAS;AAAA,MAClB;AAAA;AAAA;",
  "names": []
}
